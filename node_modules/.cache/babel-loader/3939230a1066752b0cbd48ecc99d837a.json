{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { parseISO as parseDate } from 'date-fns';\n\nvar getSessions = function getSessions(state) {\n  return state.data.sessions;\n};\n\nexport var getSpeakers = function getSpeakers(state) {\n  return state.data.speakers;\n};\n\nvar getFilteredTracks = function getFilteredTracks(state) {\n  return state.data.filteredTracks;\n};\n\nvar getFavoriteIds = function getFavoriteIds(state) {\n  return state.data.favorites;\n};\n\nvar getSearchText = function getSearchText(state) {\n  return state.data.searchText;\n};\n\nexport var getFilteredSessions = createSelector(getSessions, getFilteredTracks, function (sessions, filteredTracks) {\n  return sessions.filter(function (session) {\n    var include = false;\n    session.tracks.forEach(function (track) {\n      if (filteredTracks.indexOf(track) > -1) {\n        include = true;\n      }\n    });\n    return include;\n  });\n});\nexport var getSearchedSessions = createSelector(getFilteredSessions, getSearchText, function (sessions, searchText) {\n  if (!searchText) {\n    return sessions;\n  }\n\n  return sessions.filter(function (session) {\n    return session.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n  });\n});\nexport var getGroupedSessions = createSelector(getSearchedSessions, function (sessions) {\n  return groupSessions(sessions);\n});\nexport var getFavorites = createSelector(getSearchedSessions, getFavoriteIds, function (sessions, favoriteIds) {\n  return sessions.filter(function (x) {\n    return favoriteIds.indexOf(x.id) > -1;\n  });\n});\nexport var getGroupedFavorites = createSelector(getFavorites, function (sessions) {\n  return groupSessions(sessions);\n});\n\nvar getIdParam = function getIdParam(_state, props) {\n  var stringParam = props.match.params['id'];\n  return parseInt(stringParam, 10);\n};\n\nexport var getSession = createSelector(getSessions, getIdParam, function (sessions, id) {\n  return sessions.find(function (x) {\n    return x.id === id;\n  });\n});\n\nfunction groupSessions(sessions) {\n  return sessions.sort(function (a, b) {\n    return parseDate(a.dateTimeStart).valueOf() - parseDate(b.dateTimeStart).valueOf();\n  }).reduce(function (groups, session) {\n    var starterHour = parseDate(session.dateTimeStart);\n    starterHour.setMinutes(0);\n    starterHour.setSeconds(0);\n    var starterHourStr = starterHour.toJSON();\n    var foundGroup = groups.find(function (group) {\n      return group.startTime === starterHourStr;\n    });\n\n    if (foundGroup) {\n      foundGroup.sessions.push(session);\n    } else {\n      groups.push({\n        startTime: starterHourStr,\n        sessions: [session]\n      });\n    }\n\n    return groups;\n  }, []);\n}\n\nexport var getSpeaker = createSelector(getSpeakers, getIdParam, function (speakers, id) {\n  return speakers.find(function (x) {\n    return x.id === id;\n  });\n});\nexport var getSpeakerSessions = createSelector(getSessions, function (sessions) {\n  var speakerSessions = {};\n  sessions.forEach(function (session) {\n    session.speakerIds.forEach(function (speakerId) {\n      if (speakerSessions[speakerId]) {\n        speakerSessions[speakerId].push(session);\n      } else {\n        speakerSessions[speakerId] = [session];\n      }\n    });\n  });\n  return speakerSessions;\n});\nexport var mapCenter = function mapCenter(state) {\n  var item = state.data.locations.find(function (l) {\n    return l.id === state.data.mapCenterId;\n  });\n\n  if (item == null) {\n    return {\n      id: 1,\n      name: 'Map Center',\n      lat: 43.071584,\n      lng: -89.380120\n    };\n  }\n\n  return item;\n};","map":{"version":3,"sources":["/home/andrei/itfest2019/ionic-react-conference-app/src/data/selectors.ts"],"names":["createSelector","parseISO","parseDate","getSessions","state","data","sessions","getSpeakers","speakers","getFilteredTracks","filteredTracks","getFavoriteIds","favorites","getSearchText","searchText","getFilteredSessions","filter","session","include","tracks","forEach","track","indexOf","getSearchedSessions","name","toLowerCase","getGroupedSessions","groupSessions","getFavorites","favoriteIds","x","id","getGroupedFavorites","getIdParam","_state","props","stringParam","match","params","parseInt","getSession","find","sort","a","b","dateTimeStart","valueOf","reduce","groups","starterHour","setMinutes","setSeconds","starterHourStr","toJSON","foundGroup","group","startTime","push","getSpeaker","getSpeakerSessions","speakerSessions","speakerIds","speakerId","mapCenter","item","locations","l","mapCenterId","lat","lng"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport { parseISO as parseDate } from 'date-fns';\nimport { Session } from '../models/Session';\nimport { SessionGroup } from '../models/SessionGroup';\nimport { AppState } from './state';\n\nconst getSessions = (state: AppState) => state.data.sessions;\nexport const getSpeakers = (state: AppState) => state.data.speakers;\nconst getFilteredTracks = (state: AppState) => state.data.filteredTracks;\nconst getFavoriteIds = (state: AppState) => state.data.favorites;\nconst getSearchText = (state: AppState) => state.data.searchText;\n\nexport const getFilteredSessions = createSelector(\n  getSessions, getFilteredTracks,\n  (sessions, filteredTracks) => {\n    return sessions.filter(session => {\n      let include = false;\n      session.tracks.forEach(track => {\n        if (filteredTracks.indexOf(track) > -1) {\n          include = true;\n        }\n      });\n      return include;\n    });\n  }\n);\n\nexport const getSearchedSessions = createSelector(\n  getFilteredSessions, getSearchText,\n  (sessions, searchText) => {\n    if (!searchText) {\n      return sessions;\n    }\n    return sessions.filter(session => session.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n  }\n)\n\nexport const getGroupedSessions = createSelector(\n  getSearchedSessions,\n  (sessions) => {\n    return groupSessions(sessions);\n  }\n);\n\nexport const getFavorites = createSelector(\n  getSearchedSessions, getFavoriteIds,\n  (sessions, favoriteIds) => sessions.filter(x => favoriteIds.indexOf(x.id) > -1)\n);\n\nexport const getGroupedFavorites = createSelector(\n  getFavorites,\n  (sessions) => {\n    return groupSessions(sessions);\n  }\n)\n\nconst getIdParam = (_state: AppState, props: any) => {\n  const stringParam = props.match.params['id'];\n  return parseInt(stringParam, 10);\n}\n\nexport const getSession = createSelector(\n  getSessions, getIdParam,\n  (sessions, id) => sessions.find(x => x.id === id)\n);\n\nfunction groupSessions(sessions: Session[]) {\n  return sessions\n    .sort((a, b) => (\n      parseDate(a.dateTimeStart).valueOf() - parseDate(b.dateTimeStart).valueOf()\n    ))\n    .reduce((groups, session) => {\n      let starterHour = parseDate(session.dateTimeStart);\n      starterHour.setMinutes(0);\n      starterHour.setSeconds(0);\n      const starterHourStr = starterHour.toJSON();\n      const foundGroup = groups.find(group => group.startTime === starterHourStr);\n      if (foundGroup) {\n        foundGroup.sessions.push(session);\n      } else {\n        groups.push({\n          startTime: starterHourStr,\n          sessions: [session]\n        });\n      }\n      return groups;\n    }, [] as SessionGroup[]);\n}\n\nexport const getSpeaker = createSelector(\n  getSpeakers, getIdParam,\n  (speakers, id) => speakers.find(x => x.id === id)\n);\n\nexport const getSpeakerSessions = createSelector(\n  getSessions,\n  (sessions) => {\n    const speakerSessions: {[key: number]: Session[]} = {};\n    sessions.forEach(session => {\n      session.speakerIds.forEach(speakerId => {\n        if(speakerSessions[speakerId]) {\n          speakerSessions[speakerId].push(session);\n        } else {\n          speakerSessions[speakerId] = [session];\n        }\n      })\n    });\n    return speakerSessions;\n  }\n);\n\nexport const mapCenter = (state: AppState) => {\n  const item = state.data.locations.find(l => l.id === state.data.mapCenterId);\n  if (item == null) {\n    return {\n      id: 1,\n      name: 'Map Center',\n      lat: 43.071584,\n      lng: -89.380120\n    };\n  }\n  return item;\n}\n"]},"metadata":{},"sourceType":"module"}